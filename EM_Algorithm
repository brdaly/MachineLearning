import matplotlib.pyplot as plt
import numpy as np
import os

PLOT_COLORS = ['red', 'green', 'blue', 'orange']  # Colors for your plots
K = 4           # Number of Gaussians in the mixture model
NUM_TRIALS = 3  # Number of trials to run (can be adjusted for debugging)
UNLABELED = -1  # Cluster label for unlabeled data points (do not change)


def main(is_semi_supervised, trial_num):
    """Problem 2: EM for Gaussian Mixture Models (unsupervised and semi-supervised)"""
    print('Running {} EM algorithm...'
          .format('semi-supervised' if is_semi_supervised else 'unsupervised'))

    # Load dataset
    train_path = os.path.join('.', 'train.csv')
    x_all, z_all = load_gmm_dataset(train_path)

    # Split into labeled and unlabeled examples
    labeled_idxs = (z_all != UNLABELED).squeeze()
    x_tilde = x_all[labeled_idxs, :]   # Labeled examples
    z_tilde = z_all[labeled_idxs, :]   # Corresponding labels
    x = x_all[~labeled_idxs, :]        # Unlabeled examples

    # (1) Initialize mu and sigma by splitting the n_examples data points uniformly at random
    # into K groups, then calculating the sample mean and covariance for each group
    n_examples, dim = x.shape
    group = np.random.choice(K, n_examples)
    mu = [np.mean(x[group == g, :], axis = 0) for g in range(K)]
    sigma = [np.cov(x[group == g, :].T) for g in range(K)]

    # (2) Initialize phi to place equal probability on each Gaussian
    # phi should be a numpy array of shape (K,)
    phi = np.full((K,), fill_value=(1. / K), dtype=np.float32)

    # (3) Initialize the w values to place equal probability on each Gaussian
    # w should be a numpy array of shape (n, K)
    w = np.full((n_examples, K), fill_value=(1. / K), dtype=np.float32)

    if is_semi_supervised:
        w = run_semi_supervised_em(x, x_tilde, z_tilde, w,  phi, mu, sigma)
    else:
        w = run_em(x, w, phi, mu, sigma)

    # Plot your predictions
    z_pred = np.zeros(n_examples)
    if w is not None:  # Just a placeholder for the starter code
        for i in range(n_examples):
            z_pred[i] = np.argmax(w[i])

    plot_gmm_preds(x, z_pred, is_semi_supervised, plot_id=trial_num)


def run_em(x, w, phi, mu, sigma, max_iter=1000):
    """Problem 2(d): EM Algorithm (unsupervised).
    See inline comments for instructions.
    Args:
        x: Design matrix of shape (n_examples, dim).
        w: Initial weight matrix of shape (n_examples, k).
        phi: Initial mixture prior, of shape (k,).
        mu: Initial cluster means, list of k arrays of shape (dim,).
        sigma: Initial cluster covariances, list of k arrays of shape (dim, dim)
        max_iter: Max iterations. No need to change this
    Returns:
        Updated weight matrix of shape (n_examples, k) resulting from EM algorithm.
        More specifically, w[i, j] should contain the probability of
        example x^(i) belonging to the j-th Gaussian in the mixture.
    """
    # No need to change any of these parameters
    eps = 1e-3  # Convergence threshold
    # Stop when the absolute change in log-likelihood is < eps
    # See below for explanation of the convergence criterion
    it = 0
    ll = prev_ll = None
    while it < max_iter and (prev_ll is None or np.abs(ll - prev_ll) >= eps):
        pass
        # Just a placeholder for the starter code
        # (1) E-step: Update your estimates in w
        # (2) M-step: Update the model parameters phi, mu, and sigma
        # (3) Compute the log-likelihood of the data to check for convergence.
        # By log-likelihood, we mean `ll = sum_x[log(sum_z[p(x|z) * p(z)])]`.
        # We define convergence by the first iteration where abs(ll - prev_ll) < eps.
        # Hint: For debugging, recall part (a). We showed that ll should be monotonically increasing.
        # *** START CODE HERE

        # (1) E-step:
        n_examples, dim = x.shape
        k = len(mu)
        for i in range(n_examples):
            for j in range(k)
                w[i, j] = p_x_given_z(x[i], mu[j], sigma[j]) * phi[j]
            w/= np.sum(w, axis=1, keepdims=True)
        return w


        # (2) M-step:
        n_examples, dim = x.shape
        k = len(mu)

        phi = np.mean(w, axis=0)

        for j in range(k):
            w_j = w[:, j:j +1]
            mu[j] = np.sum(w_j * x, axis=0) / np.sum(w_j)

            sigma[j] = np.zeros_like(sigma[j])
            for i in range(n_examples):
                x_min_mu = x[i] - mu[j]



        N, D = data.shape
        K = gamma.shape[1]
        pi = np.zeros(K)
        mu = np.zeros((K, D))
        sigma = np.zeros((K, D, D))
        for ik in range(K):
            n_k = gamma[:, ik].sum()
            pi[ik] = n_k/N #definition of weights
            elements = np.reshape(gamma[:, ik], (gamma.shape[0], 1))
            #get each column and reshape (K,1) to allow for broadcasting later
            mu[ik,:] = np.multiply(elements, x)).sum(axis=0) / n_k
            sigma_sum = 0
            for i in range(N)
                var = data[i] - mu[ik]
                sigma_sum = sigma_sum + gamma[i, ik] * np.outer(var, var) #outer product creates covariance matrix
            sigma[ik,:] = sigma_sum/n_k
        return pi, mu, sigma

        # (3) Log-likelihood: ll = sum_x[log(sum_z[p(x|z) * p(z)])]`.
        N = data.shape[0]
        K = gamma.shape[1]
        d=data.shape[1]
        loss = 0
        for i in range(N):
            x = data[i]
            for k in range(K):
                pos_dist = gamma[i, k]
                log_lik = np.log(sigma)
                log_q = np.log(gamma[i,k])
                log_pz = np.log(pi[k])
                loss = (loss + np.multiply(pos_dist, log_pz) + np.multiply(pos_dist, log_lik) + np.multiply(pos_dist, -log_q))

            #print("Check loss: ", loss)
        return loss

        # We define convergence by the first iteration where abs(ll - prev_ll) < eps.
        # Hint: For debugging, recall part (a). We showed that ll should be monotonically increasing.



        # *** END CODE HERE ***

    return w


def run_semi_supervised_em(x, x_tilde, z_tilde, w, phi, mu, sigma, max_iter=1000):
    """Problem 2(e): Semi-Supervised EM Algorithm.
    See inline comments for instructions.
    Args:
        x: Design matrix of unlabeled examples of shape (n_examples_unobs, dim).
        x_tilde: Design matrix of labeled examples of shape (n_examples_obs, dim).
        z_tilde: Array of labels of shape (n_examples_obs, 1).
        w: Initial weight matrix of shape (n_examples, k).
        phi: Initial mixture prior, of shape (k,).
        mu: Initial cluster means, list of k arrays of shape (dim,).
        sigma: Initial cluster covariances, list of k arrays of shape (dim, dim)
        max_iter: Max iterations. No need to change this
    Returns:
        Updated weight matrix of shape (n_examples, k) resulting from semi-supervised EM algorithm.
        More specifically, w[i, j] should contain the probability of
        example x^(i) belonging to the j-th Gaussian in the mixture.
    """
    # No need to change any of these parameters
    alpha = 20.  # Weight for the labeled examples
    eps = 1e-3   # Convergence threshold
    # Stop when the absolute change in log-likelihood is < eps
    # See below for explanation of the convergence criterion
    it = 0
    ll = prev_ll = None
    while it < max_iter and (prev_ll is None or np.abs(ll - prev_ll) >= eps):
        pass  # Just a placeholder for the starter code
        # (1) E-step: Update your estimates in w
        # (2) M-step: Update the model parameters phi, mu, and sigma
        # (3) Compute the log-likelihood of the data to check for convergence.
        # Hint: Make sure to include alpha in your calculation of ll.
        # Hint: For debugging, recall part (a). We showed that ll should be monotonically increasing.
        # *** START CODE HERE ***
        # *** END CODE HERE ***
    return w

# *** START CODE HERE ***

    # (1) E-step:
    x = data.shape[0]
    mu = phi.shape[0]
    d = mu.shape[1]
    gamma = np.zeros((x, mu))
    for nk in range(mu):
        gamma[:, nk] = phi[nk] * sigma
    # Calculate responsibility of each cluster
    w = gamma / np.sum(gamma, axis=1, keepdims=True)
    return w

    # (2) M-step:
    #N, D = data.shape
    K = gamma.shape[1]
    pi = np.zeros(K)
    mu = np.zeros((K, D))
    sigma = np.zeros((K, D, D))
    for ik in range(K):
        n_k = gamma[:, ik].sum()
        pi[ik] = n_k / N  # definition of weights
        elements = np.reshape(gamma[:, ik], (gamma.shape[0], 1))
        # get each column and reshape (K,1) to allow for broadcasting later
        mu[ik, :] = np.multiply(elements, x)).sum(axis=0) / n_k
        sigma_sum = 0
        for i in range(N)
        var = data[i] - mu[ik]
        sigma_sum = sigma_sum + gamma[i, ik] * np.outer(var, var)  # outer product creates covariance matrix
        sigma[ik,:] = sigma_sum / n_k
    return pi, mu, sigma

    # *** END CODE HERE ***

    if is_semi_supervised:
        w = run_semi_supervised_em(x, x_tilde, z_tilde, w, phi, mu, sigma)
    else:
        w = run_em(x, w, phi, mu, sigma)

# *** END CODE HERE ***


def plot_gmm_preds(x, z, with_supervision, plot_id):
    """Plot GMM predictions on a 2D dataset `x` with labels `z`.
    Write to the output directory, including `plot_id`
    in the name, and appending 'ss' if the GMM had supervision.
    NOTE: You do not need to edit this function.
    """
    plt.figure(figsize=(12, 8))
    plt.title('{} GMM Predictions'.format('Semi-supervised' if with_supervision else 'Unsupervised'))
    plt.xlabel('x_1')
    plt.ylabel('x_2')

    for x_1, x_2, z_ in zip(x[:, 0], x[:, 1], z):
        color = 'gray' if z_ < 0 else PLOT_COLORS[int(z_)]
        alpha = 0.25 if z_ < 0 else 0.75
        plt.scatter(x_1, x_2, marker='.', c=color, alpha=alpha)

    file_name = 'pred{}_{}.pdf'.format('_ss' if with_supervision else '', plot_id)
    save_path = os.path.join('.', file_name)
    plt.savefig(save_path)


def load_gmm_dataset(csv_path):
    """Load dataset for Gaussian Mixture Model.
    Args:
         csv_path: Path to CSV file containing dataset.
    Returns:
        x: NumPy array shape (n_examples, dim)
        z: NumPy array shape (n_exampls, 1)
    NOTE: You do not need to edit this function.
    """

    # Load headers
    with open(csv_path, 'r') as csv_fh:
        headers = csv_fh.readline().strip().split(',')

    # Load features and labels
    x_cols = [i for i in range(len(headers)) if headers[i].startswith('x')]
    z_cols = [i for i in range(len(headers)) if headers[i] == 'z']

    x = np.loadtxt(csv_path, delimiter=',', skiprows=1, usecols=x_cols, dtype=float)
    z = np.loadtxt(csv_path, delimiter=',', skiprows=1, usecols=z_cols, dtype=float)

    if z.ndim == 1:
        z = np.expand_dims(z, axis=-1)

    return x, z


if __name__ == '__main__':
    np.random.seed(229)
    # Run NUM_TRIALS trials to see how different initializations
    # affect the final predictions with and without supervision
    for t in range(NUM_TRIALS):
        main(is_semi_supervised=False, trial_num=t)
        main(is_semi_supervised=True, trial_num=t)
